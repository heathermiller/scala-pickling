package scala.pickling

import scala.reflect.macros.AnnotationMacro
import scala.reflect.runtime.{universe => ru}
import ir._

// purpose of this macro: implementation of genPickler[T]. i.e. the macro that is selected
// via implicit search and which initiates the process of generating a pickler for a given type T
// NOTE: dispatch is done elsewhere. picklers generated by genPickler[T] only know how to process T
// but not its subclasses or the types convertible to it!
trait PicklerMacros extends Macro {
  def impl[T: c.WeakTypeTag](format: c.Tree): c.Tree = preferringAlternativeImplicits {
    import c.universe._
    import definitions._
    val tpe = weakTypeOf[T]
    val sym = tpe.typeSymbol.asClass
    import irs._
    val pickler = {
      val builderTpe = pickleBuilderType(format)
      val picklerPid = syntheticPackageName
      val picklerName = syntheticPicklerName(tpe, builderTpe)
      introduceTopLevel(picklerPid, picklerName) {
        def unifiedPickle = { // NOTE: unified = the same code works for both primitives and objects
          if (tpe.typeSymbol.asClass.typeParams.nonEmpty)
            c.abort(c.enclosingPosition, s"TODO: cannot pickle polymorphic types yet ($tpe)")
          val cir = classIR(tpe)
          val beginEntry = q"builder.beginEntry(scala.pickling.`package`.fastTypeTag[$tpe], picklee)"
          val putFields = cir.fields.flatMap(fir => {
            if (sym.isModuleClass) {
              Nil
            } else if (fir.hasGetter) {
              def putField(getterLogic: Tree) = q"builder.putField(${fir.name}, b => $getterLogic.pickleInto(b))"
              if (fir.isPublic) List(putField(q"picklee.${TermName(fir.name)}"))
              else reflectively("picklee", fir)(fm => putField(q"$fm.get.asInstanceOf[${fir.tpe}]"))
            } else {
              // NOTE: this means that we've encountered a primary constructor parameter elided in the "constructors" phase
              // we can do nothing about that, so we don't serialize this field right now leaving everything to the unpickler
              // when deserializing we'll have to use the Unsafe.allocateInstance strategy
              Nil
            }
          })
          val optimizedPutFields =
            if (putFields.isEmpty) Nil
            else if (sym.isPrimitive || sym.isDerivedValueClass) putFields
            else List(q"if (picklee != null) { ..$putFields; () }")
          val endEntry = q"builder.endEntry()"
          q"""
            $beginEntry
            ..$optimizedPutFields
            $endEntry
          """
        }
        def pickleLogic = tpe match {
          case NothingTpe => c.abort(c.enclosingPosition, "cannot pickle Nothing") // TODO: report the serialization path that brought us here
          case _ => unifiedPickle
        }
        q"""
          class $picklerName extends scala.pickling.Pickler[$tpe] {
            import scala.pickling._
            import scala.pickling.`package`.PickleOps
            type PickleFormatType = ${format.tpe}
            implicit val format = new PickleFormatType()
            type PickleBuilderType = ${pickleBuilderType(format)}
            def pickle(pickleeRaw: Any, builder: PickleBuilderType): Unit = {
              val picklee = pickleeRaw.asInstanceOf[$tpe]
              $pickleLogic
            }
          }
        """
      }
    }
    q"new $pickler"
  }
}

// purpose of this macro: implementation of genUnpickler[T]. i.e., the macro that is selected via implicit
// search and which initiates the process of generating an unpickler for a given type T.
// NOTE: dispatch is done elsewhere. unpicklers generated by genUnpickler[T] only know how to process T
// but not its subclasses or the types convertible to it!
trait UnpicklerMacros extends Macro {
  def impl[T: c.WeakTypeTag](format: c.Tree): c.Tree = preferringAlternativeImplicits {
    import c.universe._
    import definitions._
    val tpe = weakTypeOf[T]
    val sym = tpe.typeSymbol.asClass
    import irs._
    val unpickler = {
      val readerTpe = pickleReaderType(format)
      val unpicklerPid = syntheticPackageName
      val unpicklerName = syntheticUnpicklerName(tpe, readerTpe)
      introduceTopLevel(unpicklerPid, unpicklerName) {
        if (tpe.typeSymbol.asClass.typeParams.nonEmpty)
          c.abort(c.enclosingPosition, s"TODO: cannot unpickle polymorphic types yet ($tpe)")
        def unpicklePrimitive = q"reader.readPrimitive(tag)"
        def unpickleObject = {
          def readField(name: String, tpe: Type) = q"reader.readField($name).unpickle[$tpe]"
          // TODO: validate that the tpe argument of unpickle and weakTypeOf[T] work together
          // NOTE: step 1) this creates an instance and initializes its fields reified from constructor arguments
          val cir = classIR(tpe)
          val canCallCtor = !cir.fields.exists(_.isErasedParam)
          val pendingFields = cir.fields.filter(fir => fir.isNonParam || (!canCallCtor && fir.isReifiedParam))
          val instantiationLogic = {
            if (sym.isModuleClass) {
              q"${sym.module}"
            } else if (canCallCtor) {
              val ctorSym = tpe.declaration(nme.CONSTRUCTOR) match {
                case overloaded: TermSymbol => overloaded.alternatives.head.asMethod // NOTE: primary ctor is always the first in the list
                case primaryCtor: MethodSymbol => primaryCtor
              }
              val ctorArgs = ctorSym.paramss.map(_.map(f => readField(f.name.toString, f.typeSignature)))
              q"new $tpe(...$ctorArgs)"
            } else {
              q"scala.concurrent.util.Unsafe.instance.allocateInstance(classOf[$tpe]).asInstanceOf[$tpe]"
            }
          }
          // NOTE: step 2) this sets values for non-erased fields which haven't been initialized during step 1
          val initializationLogic = {
            if (sym.isModuleClass || pendingFields.isEmpty) instantiationLogic
            else {
              val instance = TermName(tpe.typeSymbol.name + "Instance")
              val initPendingFields = pendingFields.flatMap(fir => {
                val readFir = readField(fir.name, fir.tpe)
                if (fir.isPublic && fir.hasSetter) List(q"$instance.${TermName(fir.name)} = $readFir")
                else reflectively(instance, fir)(fm => q"$fm.set($readFir)")
              })
              q"""
                val $instance = $instantiationLogic
                ..$initPendingFields
                $instance
              """
            }
          }
          q"$initializationLogic"
        }
        def unpickleLogic = tpe match {
          case NullTpe => q"null"
          case NothingTpe => c.abort(c.enclosingPosition, "cannot unpickle Nothing") // TODO: report the deserialization path that brought us here
          case _ => q"if (reader.atPrimitive) $unpicklePrimitive else $unpickleObject"
        }
        q"""
          class $unpicklerName extends scala.pickling.Unpickler[$tpe] {
            import scala.pickling._
            import scala.pickling.ir._
            import scala.reflect.runtime.universe._
            type PickleFormatType = ${format.tpe}
            implicit val format = new PickleFormatType()
            type PickleReaderType = ${pickleReaderType(format)}
            def unpickle(tag: TypeTag[_], reader: PickleReaderType): Any = $unpickleLogic
          }
        """
      }
    }
    q"new $unpickler"
  }
}

// purpose of this macro: implementation of PickleOps.pickle and pickleInto. i.e., this exists so as to:
// 1) perform dispatch based on the type of the argument
// 2) insert a call in the generated code to the genPickler macro (described above)
trait PickleMacros extends Macro {
  def pickle[T: c.WeakTypeTag](format: c.Tree): c.Tree = {
    import c.universe._
    val tpe = weakTypeOf[T]
    val q"${_}($pickleeArg)" = c.prefix.tree
    q"""
      import scala.pickling._
      val picklee: $tpe = $pickleeArg
      val builder = $format.createBuilder()
      picklee.pickleInto(builder)
      builder.result()
    """
  }
  def pickleInto[T: c.WeakTypeTag](builder: c.Tree): c.Tree = {
    import c.universe._
    import definitions._
    val tpe = weakTypeOf[T].widen // TODO: I used widen to make module classes work, but I don't think it's okay to do that
    val sym = tpe.typeSymbol.asClass
    val q"${_}($pickleeArg)" = c.prefix.tree

    def createPickler(tpe: Type, inlinePicklee: Boolean) = {
      val picklee = if (inlinePicklee) pickleeArg else q"picklee"
      q"implicitly[Pickler[$tpe]].pickle($picklee, $builder)"
    }
    def finalDispatch = createPickler(tpe, inlinePicklee = true)
    def nonFinalDispatch = {
      val nullDispatch = CaseDef(Literal(Constant(null)), EmptyTree, createPickler(NullTpe, inlinePicklee = false))
      val compileTimeDispatch = compileTimeDispatchees(tpe) map (tpe => {
        CaseDef(Bind(TermName("clazz"), Ident(nme.WILDCARD)), q"clazz == classOf[$tpe]", createPickler(tpe, inlinePicklee = false))
      })
      val runtimeDispatch = CaseDef(Ident(nme.WILDCARD), EmptyTree, q"""
        val pickler = Pickler.genPickler(getClass.getClassLoader, clazz)
        pickler.pickle(picklee, $builder.asInstanceOf[pickler.PickleBuilderType])
      """)
      // TODO: do we still want to use something like HasPicklerDispatch?
      // NOTE: we dispatch on erasure, because that's the best we can have here anyways
      // so, if we have C[T], then we generate a pickler for C[_] and let the pickler do the rest
      // (e.g. to fetch the type tag for T as discussed yesterday and do the necessary dispatch)
      q"""
        val clazz = if (picklee != null) picklee.getClass else null
        ${Match(q"clazz", nullDispatch +: compileTimeDispatch :+ runtimeDispatch)}
      """
    }
    val isFinalDispatch = sym.isFinal || sym.isModuleClass
    val prologue = if (isFinalDispatch) q"" else q"val picklee = $pickleeArg"
    val dispatchLogic = if (isFinalDispatch) finalDispatch else nonFinalDispatch
    q"""
      $prologue
      $dispatchLogic
    """
  }
}

// purpose of this macro: implementation of unpickle method on type Pickle, which does
// 1) dispatch to the correct unpickler based on the type of the input,
// 2) insert a call in the generated code to the genUnpickler macro (described above)
trait UnpickleMacros extends Macro {
  // TODO: implement this
  // override def onInfer(tic: c.TypeInferenceContext): Unit = {
  //   c.error(c.enclosingPosition, "must specify the type parameter for method unpickle")
  // }
  def pickleUnpickle[T: c.WeakTypeTag]: c.Tree = {
    import c.universe._
    val tpe = weakTypeOf[T]
    val pickleArg = c.prefix.tree
    q"""
      val pickle = $pickleArg
      val format = new ${pickleFormatType(pickleArg)}()
      val reader = format.createReader(pickle)
      reader.unpickle[$tpe]
    """
  }
  def readerUnpickle[T: c.WeakTypeTag]: c.Tree = {
    import c.universe._
    val tpe = weakTypeOf[T]
    val sym = tpe.typeSymbol.asClass
    val readerArg = c.prefix.tree

    def createUnpickler(tpe: Type) = q"implicitly[Unpickler[$tpe]]"
    def finalDispatch = createUnpickler(tpe)
    def nonFinalDispatch = {
      val compileTimeDispatch = compileTimeDispatchees(tpe) map (tpe => {
        // TODO: do we still want to use something like HasPicklerDispatch (for unpicklers it would be routed throw tpe's companion)?
        // NOTE: we have a precise type at hand here, but we do dispatch on erasure
        // why? because picklers are created generic, i.e. for C[T] we have a single pickler of type Pickler[C[_]]
        // therefore here we dispatch on erasure and later on pass the precise type to `unpickle`
        CaseDef(Bind(TermName("tpe"), Ident(nme.WILDCARD)), q"tpe.typeSymbol == scala.pickling.`package`.fastTypeTag[$tpe].tpe.typeSymbol", createUnpickler(tpe))
      })
      val runtimeDispatch = CaseDef(Ident(nme.WILDCARD), EmptyTree, q"Unpickler.genUnpickler(currentMirror, tag)")
      Match(q"tag.tpe", compileTimeDispatch :+ runtimeDispatch)
    }
    val dispatchLogic = if (sym.isFinal || sym.isModuleClass) finalDispatch else nonFinalDispatch

    q"""
      import scala.reflect.runtime.currentMirror
      val reader = $readerArg
      val tag = reader.readTag(currentMirror)
      val unpickler = $dispatchLogic
      val result = unpickler.unpickle(tag, reader.asInstanceOf[unpickler.PickleReaderType])
      result.asInstanceOf[$tpe]
    """
  }
}

trait PickleableMacro extends AnnotationMacro {
  def impl = {
    import c.universe._
    import Flag._
    c.annottee match {
      case ClassDef(mods, name, tparams, Template(parents, self, body)) =>
        // TODO: implement PickleableBase methods and append them to body
        ClassDef(mods, name, tparams, Template(parents :+ tq"scala.pickling.PickleableBase", self, body))
    }
  }
}
